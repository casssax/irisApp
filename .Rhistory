hist(fit_cyl1$residuals,breaks=9)
hist(fit_cyl1$residuals,breaks=8)
hist(fit_cyl1$residuals,breaks=7)
hist(fit_cyl1$residuals,breaks=6)
hist(fit_cyl1$residuals,breaks=5)
hist(fit_cyl1$residuals,breaks=4)
qqnorm(fit_cyl1$residuals)
qqline(fit_cyl1$residuals)
plot(fit_cyl1$residuals ~ fit_cyl1$fitted)
plot(abs(fit_cyl1$residuals) ~ fit_cyl1$fitted)
plot(fit_cyl1$residuals)
?pairs
fit_cyl1$coef[2,2]
fit_cyl1$coef
summary(fit_cyl1)$coef[2,2]
summary(fit_cyl1)
summary(fit_cyl1)$coef[2,1]
summary(fit_cyl1)$coef[2,4]
cor(mtc2$mpg,mtc2$m_wt)
cor(mtc2$mpg,mtc2$m_qsec)
cor(mtc2$mpg,mtc2$m_drat)
cor(mtc2$mpg,mtc2$m_hp)
cor(mtc2$mpg,mtc2$m_disp)
?kable
install.packages("corrplot")
library(corrplot)
mcor <- cor(mtcars)
round(mcor,2)
corrplot(mcor)
pairs(mtcars, main="mtcars data")
corrplot(mcor, addCoef.col="black",method="shade",shade.col=NA)
library(datasets)
library(plyr)
library(dplyr)
data(mtcars)
attach(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt,mtcars)
summary(fit1)
fit2 <- lm(mpg ~ factor(cyl),mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl) + wt + factor(cyl)*wt,mtcars)
summary(fit3)
anova(fit1,fit3)
fit4 <- lm(mpg ~ am + hp + factor(cyl),mtcars)
fit5 <- lm(mpg ~ am + hp + factor(cyl) + am*factor(cyl),mtcars)
anova(fit4,fit5)
summary(fit4)
summary(fit5)
fit6 <- lm(mpg ~ I(wt * .5) + factor(cyl),mtcars)
summary(fit6)
summary(fit1)
mtc <- mtcars
# convert to factors
mtc$cyl <- as.factor(mtc$cyl)
mtc$gear <- as.factor(mtc$gear)
mtc$carb <- as.factor(mtc$carb)
# create mean centered columns
mtc$m_qsec <- mtc$qsec - mean(mtc$qsec)
mtc$m_wt <- mtc$wt - mean(mtc$wt)
mtc$m_drat <- mtc$drat - mean(mtc$drat)
mtc$m_hp <- mtc$hp - mean(mtc$hp)
mtc$m_disp <- mtc$disp - mean(mtc$disp)
drops <- c("qsec","wt","drat","hp","disp")
# create new dataframe with factors/centered data only
mtc2 <- mtc[!(names(mtc) %in% drops)]
fit_hp <- lm(mpg ~ am + m_hp, mtc2)
fit_hpp <- summary(fit_hp)$coef[2,4]
fit_hpc <- summary(fit_hp)$coef[3,1]
fit_hp_r <- summary(fit_hp)$adj.r.squared
fit_hp_r
fit_cyl1 <- lm(mpg ~ am + m_hp + cyl, mtc2)
summary(fit_cyl)
summary(fit_cyl1)
library(car)
fit0 <- lm(mpg ~ .,mtcars)
vif(fit0)
sqrt(vif(fit0))
cor(mtcars$wt,mtcars$disp)
cor(mtcars$wt,mtcars$hp)
cor(mtcars$wt,mtcars$drat)
cor(mtcars$hp,mtcars$disp)
library(datasets)
library(ggplot2)
library(gridExtra)
library(knitr)
data(mtcars)
# copy dataframe
mtc <- mtcars
# convert to factors
mtc$cyl <- as.factor(mtc$cyl)
mtc$gear <- as.factor(mtc$gear)
mtc$carb <- as.factor(mtc$carb)
# create mean centered columns
mtc$m_qsec <- mtc$qsec - mean(mtc$qsec)
mtc$m_wt <- mtc$wt - mean(mtc$wt)
mtc$m_drat <- mtc$drat - mean(mtc$drat)
mtc$m_hp <- mtc$hp - mean(mtc$hp)
mtc$m_disp <- mtc$disp - mean(mtc$disp)
drops <- c("qsec","wt","drat","hp","disp")
# create new dataframe with factors/centered data only
mtc2 <- mtc[!(names(mtc) %in% drops)]
fit_cyl1 <- lm(mpg ~ am + m_hp + cyl, mtc2)
cyl_r1 <- summary(fit_cyl1)$adj.r.squared
cyl_am1 <- summary(fit_cyl1)$coef[2,1]
plot(predict(fit_cyl1), resid(fit_cyl1), pch = '.')
plot(predict(fit_cyl1), resid(fit_cyl1))
abline(h=0,col="red")
fit0 <- lm(mpg ~ . -1,mtc2)
plot(predict(fit0), resid(fit0))
abline(h=0,col="red")
hatvalues(fit0)
?lm
library(datasets)
library(plyr)
library(dplyr)
data(mtcars)
mtc <- mtcars
# convert to factors
mtc$cyl <- as.factor(mtc$cyl)
mtc$gear <- as.factor(mtc$gear)
mtc$carb <- as.factor(mtc$carb)
# create mean centered columns
mtc$m_qsec <- mtc$qsec - mean(mtc$qsec)
mtc$m_wt <- mtc$wt - mean(mtc$wt)
mtc$m_drat <- mtc$drat - mean(mtc$drat)
mtc$m_hp <- mtc$hp - mean(mtc$hp)
mtc$m_disp <- mtc$disp - mean(mtc$disp)
drops <- c("qsec","wt","drat","hp","disp")
# create new dataframe with factors/centered data only
mtc2 <- mtc[!(names(mtc) %in% drops)]
fit1 <- lm(mpg ~ am + cyl + am*cyl,mtc2)
fit2 <- lm(mpg ~ am + cyl + am:cyl,mtc2)
summary(fit1)
summary(fit2)
fit3 <- lm(mpg ~ am:cyl,mtc2)
summary(fit3)
results <- c(6,8,7,7)
summary(results)
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which1)
plot(fit, which=1)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . - Examination, swiss)
vif(mdl2)
x1c <- simbus()
x1c <- simbias()
apply(x1c,1,mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1,fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3))/ 2
n/d
pf(n/d, 2,43,lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
library(datasets)
library(ggplot2)
library(gridExtra)
library(knitr)
data(mtcars)
# copy dataframe
mtc <- mtcars
# convert to factors
mtc$cyl <- as.factor(mtc$cyl)
mtc$gear <- as.factor(mtc$gear)
mtc$carb <- as.factor(mtc$carb)
# create mean centered columns
mtc$m_qsec <- mtc$qsec - mean(mtc$qsec)
mtc$m_wt <- mtc$wt - mean(mtc$wt)
mtc$m_drat <- mtc$drat - mean(mtc$drat)
mtc$m_hp <- mtc$hp - mean(mtc$hp)
mtc$m_disp <- mtc$disp - mean(mtc$disp)
drops <- c("qsec","wt","drat","hp","disp")
# create new dataframe with factors/centered data only
mtc2 <- mtc[!(names(mtc) %in% drops)]
fit <- lm(mpg ~ am, mtc2)
fit_hp <- lm(mpg ~ am + m_hp, mtc2)
fit_cyl1 <- lm(mpg ~ am + m_hp + cyl, mtc2)
anova(fit,fit_hp,fit_cyl1)
shapiro.test(fit_cyl1$residuals)
shapiro.test(fit_hp$residuals)
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family="binomial", data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
nxt()
head(hits)
class(hits$date)
as.integer(head(hits$date))
mdl <- gml(visits ~ date, poisson,hits)
mdl <- glm(visits ~ date, poisson,hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits$visits)
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, family="poisson", offset=log(visits + 1), data = hits)
mdl2 <- glm(simplystats ~ date, family="poisson", offset=log(visits + 1), data = hits)
qpois(.95, mdl2$fitted.values[704])
library(MASS)
?shuttle
head(shuttle)
unique(shuttle$use)
q1 <- glm(use ~ wind, binomial,shuttle)
summary(q1)
summary(q1)$coef[2]
q10 <- summary(q1)$coef[2]
q10 / (1 - q10)
q2 <- glm(use ~ wind + magn, binomial,shuttle)
summary(q2)
q20 <- summary(q2)$coef[2]
q20 / (1 - q20)
q2od < - q20 / (1 - q20)
q2od <- q20 / (1 - q20)
q1od <- q10 / (1 - q10)
q1od - q2od
q2od - q1od
q1od / q2od
q2od / q1od
summary(q1)
q1b <- glm(use ~ wind -1, binomial,shuttle)
summary(q1b)
q1b <- glm(use ~  -1, binomial,shuttle)
summary(q1b)
anova(q1)
x <- glm(1-use ~ 1,binomial,shuttle)
x <- glm(use ~ 1,binomial,shuttle)
summary(x)
summary(q1)
x <- glm(use ~ wind -1,binomial,shuttle)
summary(x)
x <- glm(use ~ 1,binomial,shuttle)
y <- glm(use ~ 1 -1,binomial,shuttle)
summary(x)$coef
summary(y)$coef
summary(y)
y <- glm(use[use == 'auto'] ~ 1,binomial,shuttle)
y <- glm(use[use == auto] ~ 1,binomial,shuttle)
data(InsectSprays)
q4 <- glm(count ~ spray, poisson,InsectSprays)
summary(q4)
n <- summary(q4)$coef[1]
d <- summary(q4)$coef[2] + n
n/d
d <- summary(q4)$coef[2]
n/d
d/n
d <- summary(q4)$coef[2] + n
exp(n) / exp(d)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
spline <- sapply(knots, function(knot) (x > knot) * (x - knot))
xmat <- cbind(1,x,spline)
yhat <- predict(lm(y ~ xmat -1))
summary(yhat)
yhat
plot(yhat)
spline
summary(q1)
n <- summary(q1)$coef[1]
d <- summary(q1)$coef[2] + n
n/d
n
d <- summary(q1)$coef[2]
exp(d)
summary(shuttle)
?relevel
shuttle$use <- relevel(shuttle$use, c(0,1))
as.numeric(shuttle$use == 'auto')
shuttle$use
shuttle$use <- as.numeric(shuttle$use == 'auto')
q1 <- glm(use ~ wind, binomial,shuttle)
summary(q1)
exp(summary(q1)$coef[2])
summary(q1)$coef[2]
summary(shuttle)
count(shuttle$use)
table(shuttle$use)
shuttle$wind <- as.numeric(shuttle$wind == 'head')
q1 <- glm(use ~ wind, binomial,shuttle)
summary(q1)
exp(summary(q1)$coef[2])
spline
yhat
summary(lm(y ~ xmat -1))
q1 <- glm(use ~ wind + magn, binomial,shuttle)
summary(g1)
summary(q1)
exp(summary(q1)$coef[2])
q1a <- glm(use ~ wind, binomial,shuttle)
exp(summary(q1a)$coef[2])
exp(summary(q1a)$coef[1])
q1 <- glm(use ~ wind + magn -1 , binomial,shuttle)
exp(summary(q1)$coef[2])
summary(q1)
summary(shuttle)
test <- glm(vis ~ use, binomial,shuttle)
test <- glm(vis ~ use[use == 1], binomial,shuttle)
test <- glm(vis ~ use, binomial,shuttle)
test2 <- glm(vis ~ 1,binomial,shuttle)
summary(test)
summary(test2)
test2 <- glm(vis ~ use -1,binomial,shuttle)
summary(test2)
?log
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda", destfile="leek.rda")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda", destfile="leek.rda",method="curl")
load("leek.rda")
leek$julian <- julian(leek$date)
str(leek)
gaData$julian <- julian(gaData$date)
head(gaData)
glm2 <- glm(gaData$simplystats ~ julian(gaData$date),offset=log(visits+1),
family="poisson",data=gaData)
summary(glm2)
glm3 <- glm(gaData$simplystats ~ julian(gaData$date),offset=log(10) + log(visits+1),
family="poisson",data=gaData)
summary(glm3)
log(10)
summary(glm2)$coef[1] - log(10)
summary(glm2)$coef[1] - summary(glm3)$coef[1]
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
str(AlzheimerDisease)
str(AlzheimerDisease)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
training
plot(training$CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, col=age)
plot(training$CompressiveStrength, col=training$age)
library(Hmisc)
cutAge <- cut2(training$Age,g=3)
plot(training$CompressiveStrength, col=training$Age)
plot(training$CompressiveStrength, col=cutAge)
table(cutAge)
cutAge <- cut2(training$Age,g=5)
table(cutAge)
plot(training$CompressiveStrength, col=cutAge)
plot(training$CompressiveStrength, col=training$FlyAsh)
table(training$FlyAsh)
cutAsh <- cut2(training$FlyAsh,g=5)
table(cutAsh)
plot(training$CompressiveStrength, col=cutAsh)
plot(training$CompressiveStrength, col=training$Cement)
cutVar <- cut2(training$Cement,g=5)
plot(training$CompressiveStrength, col=cutVar)
cutVar <- cut2(training$BlastFurnaceSlag,g=5)
plot(training$CompressiveStrength, col=cutVar)
cutVar <- cut2(training$Water,g=5)
plot(training$CompressiveStrength, col=cutVar)
cutVar <- cut2(training$Superplasticizer,g=5)
plot(training$CompressiveStrength, col=cutVar)
cutVar <- cut2(training$CoarseAggregate,g=5)
plot(training$CompressiveStrength, col=cutVar)
cutVar <- cut2(training$FineAggregate,g=5)
plot(training$CompressiveStrength, col=cutVar)
cutVar <- cut2(training$Age,g=5)
plot(training$CompressiveStrength, col=cutVar)
hist(training$SuperPlasticizer)
hist(log10(training$SuperPlasticizer))
hist(log10(training$SuperPlasticizer)+1)
str(training$SuperPlasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer)+1)
min(training$Superplasticizer)
cutVar <- cut2(testing$Superplasticizer)
table(cutVar)
hist(log10(training$Superplasticizer)+1)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
?write.csv
library(rpart)
?rpart
?data.frame
?write.csv
?head
hello there
shiny::runApp('DataProd/knn3')
x <- c(1,2,3)
class(x)
x1,x2,x3 <- x
predictions <- list(Setosa = x[1],
Versicolor = x[2],
Verginica = x[3])
x
names(x)
predictions
max(predicgtions)
max(predictions)
max(as.numeric(predictions))
predictions <- data.frame(Species = c('Setosa','Versicolor','Verginica'),
pcnt = x)
predictions
max(predictions$pcnt)
y <- predictions[pcnt == max(predictions$pcnt)]
y <- predictions[predictions$pcnt == max(predictions$pcnt)]
y <- predictions[predictions$pcnt == max(predictions$pcnt),]
y
shiny::runApp('DataProd/knn3')
shiny::runApp('DataProd/knn3')
shiny::runApp('DataProd/knn3')
iris2 <- iris %>% group_by(Species) %>% summarise( SLmin = min(Sepal.Length),
SLmax = max(Sepal.Length),
SWmin = min(Sepal.Width),
SWmax = max(Sepal.Width),
PLmin = min(Petal.Length),
PLmax = max(Petal.Length),
PWmin = min(Petal.Width),
PWmax = max(Petal.Width))
library(plyr)
iris2 <- iris %>% group_by(Species) %>% summarise( SLmin = min(Sepal.Length),
SLmax = max(Sepal.Length),
SWmin = min(Sepal.Width),
SWmax = max(Sepal.Width),
PLmin = min(Petal.Length),
PLmax = max(Petal.Length),
PWmin = min(Petal.Width),
PWmax = max(Petal.Width))
library(dplyr)
iris2 <- iris %>% group_by(Species) %>% summarise( SLmin = min(Sepal.Length),
SLmax = max(Sepal.Length),
SWmin = min(Sepal.Width),
SWmax = max(Sepal.Width),
PLmin = min(Petal.Length),
PLmax = max(Petal.Length),
PWmin = min(Petal.Width),
PWmax = max(Petal.Width))
iris2
shiny::runApp('DataProd/knn3')
shiny::runApp('DataProd/knn3')
shiny::runApp('DataProd/knn3')
iris2
irisMinMax <- iris %>% group_by(Species) %>% summarise( SLmin = min(Sepal.Length),
SLmax = max(Sepal.Length),
SWmin = min(Sepal.Width),
SWmax = max(Sepal.Width),
PLmin = min(Petal.Length),
PLmax = max(Petal.Length),
PWmin = min(Petal.Width),
PWmax = max(Petal.Width))
save(irisMinMax,file = "irisMinMax.RData")
setwd("~/datasciencecoursera/DataProd")
setwd("~/datasciencecoursera/DataProd/knn3")
save(irisMinMax,file = "irisMinMax.RData")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
knnFit
data(iris)
library(caret)
set.seed(808)
inTrain <- createDataPartition(iris$Species, p = 2/3, list = FALSE)
## Save the predictors and class in different objects
irisTrain <- iris[ inTrain, -ncol(iris)]
irisTest  <- iris[-inTrain, -ncol(iris)]
trainClass <- iris[ inTrain, "Species"]
testClass  <- iris[-inTrain, "Species"]
centerScale <- preProcess(irisTrain)
centerScale
training <- predict(centerScale, irisTrain)
testing <- predict(centerScale, irisTest)
knnFit <- knn3(training, trainClass, k = 11)
knnFit
knnFit$finalModel
summary(knnFit)
knnFit
library(gridExtra)
p1 <- qplot(Sepal.Length, Petal.Length, data = iris,color = Species)
p2 <- qplot(Sepal.Width, Petal.Width, data = iris,color = Species)
p3 <- qplot(Sepal.Width, Petal.Length, data = iris,color = Species)
p4 <- qplot(Sepal.Length, Petal.Width, data = iris,color = Species)
irisPlots <- grid.arrange(p1,p3,p4,p2)
irisPlots
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
